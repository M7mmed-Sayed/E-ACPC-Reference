/*
int trie[N][3];
int vis[N];
void insert(int val) {
	int st = 0; bool bit;
	for (int i = 30; i >= 0; i--) {
		bit = (1LL << i) & val;
		if (!trie[st][bit]) trie[st][bit] = ++k;
		st = trie[st][bit];
		vis[st]++;
	}
}

*/
/*
const int MaxN=500500;
int end[MaxN];
int next[27][MaxN];

bool created[MaxN];
int sz=0;
void insert(string &s)
{
    int v=0;
    for(int i=0;i<s.size();i++)
    {
        int c=s[i]-'a';
        if(!created[next[c][v]])
        {
            next[c][v]=++sz;
            created[sz]=1;
        }
        v=next[c][v];
    }
    ++end[v];
}

bool search(string tmp)
{
    int v=0;
    for(int i=0;i<tmp.size();i++)
    {
        int c=tmp[i]-'a';
        if(!created[next[c][v]])
            return false;
        v=next[c][v];
    }

    return end[v]>0;
}
*/