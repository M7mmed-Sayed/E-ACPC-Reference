#include <iostream>
#include <string>
#include <vector>
#define sz(n) n.size()
using namespace std;
void preKMP(string pattern, vector<int>&f)
{
    int m = sz(pattern), k;
    f[0] = -1;
    for (int i = 1; i < m; i++)
    {
        k = f[i - 1];
        while (k >= 0)
        {
            if (pattern[k] == pattern[i - 1])
                break;
            else
                k = f[k];
        }
        f[i] = k + 1;
    }
}
bool KMP(string pattern, string target)
{
    int m =sz(pattern),n=sz(target);
    vector<int>f(m);
    preKMP(pattern, f);
    int i = 0;
    int k = 0;
    while (i < n)
    {
        if (k == -1)
            i++,
            k = 0;
        else if (target[i] == pattern[k])
        {
            i++;
            k++;
            if (k == m)
                return 1;
        }
        else
            k = f[k];
    }
    return 0;
}

int main()
{
    string Search,targ;
    cin>>Search>>targ;
    if(KMP(Search,targ))cout<<"YES\n";
    return 0;
}
